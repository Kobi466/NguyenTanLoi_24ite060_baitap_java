package Week3_IOStream;import javax.swing.*;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.util.concurrent.*;class FileSearchTask implements Callable<Integer> {    File file;    String search;    public FileSearchTask(File file, String search) {        this.file = file;        this.search = search;    }    @Override    public Integer call() throws Exception {        int count = 0;        try{            BufferedReader br = new BufferedReader(new FileReader(file));            String line;            while ((line = br.readLine()) != null) {                count += demTuKhoa(line, search);            }        }catch (Exception e){            e.printStackTrace();        }        System.out.println(file.getName() + " : " + count + "lan");        return count;    }    private int demTuKhoa(String line, String search) {        int index = 0, count = 0;        while ((index = line.indexOf(search, index)) != -1) {            count++;            index += search.length();        }        return count;    }}public class ex3 {    public static void main(String[] args) {        File folder = new File("C:\\Users\\ADMIN\\Documents\\TepText");        String key = "con";        File[] listOfFiles = folder.listFiles((dir, name) -> name.toLowerCase().endsWith(".txt"));        if (listOfFiles == null || listOfFiles.length == 0) {            System.out.println("No text files found");        }        ExecutorService executor = Executors.newFixedThreadPool(10);        Future<Integer>[] results = new Future[listOfFiles.length];        for (int i = 0; i < listOfFiles.length; i++) {            results[i] = executor.submit(new FileSearchTask(listOfFiles[i], key));        }        executor.shutdown();        int totalOccurrences = 0;        try {            for (Future<Integer> future : results) {                totalOccurrences += future.get(); // cho ket qua moi luong            }            System.out.println("Tong so lan xuat hien tu " + key + "': " + totalOccurrences);        } catch (InterruptedException | ExecutionException e) {            e.printStackTrace();        }    }}